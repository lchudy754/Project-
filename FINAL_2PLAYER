import tkinter as tk
from tkinter import messagebox

# Define the board size
BOARD_SIZE = 5

# Initialize the Tkinter window
root = tk.Tk()
root.title("Tic-Tac-Toe")

# Create a 5x5 grid for the game board
buttons = [[None for _ in range(BOARD_SIZE)] for _ in range(BOARD_SIZE)]

# Create a 5x5 list to track the board state
board = [[" " for _ in range(BOARD_SIZE)] for _ in range(BOARD_SIZE)]

# Track the current player
current_player = "X"

# Function to update the board and check for win or draw
def on_button_click(row, col):
    global current_player
    
    # Only proceed if the button has not been clicked
    if board[row][col] == " ":
        # Update the board with the player's symbol
        board[row][col] = current_player
        buttons[row][col].config(text=current_player, state=tk.DISABLED)

        # Check for a win
        if check_win(board, current_player):
            messagebox.showinfo("Game Over", f"Player {current_player} wins!")
            reset_game()
            return

        # Check for a draw
        if check_draw(board):
            messagebox.showinfo("Game Over", "It's a draw!")
            reset_game()
            return

        # Switch to the next player
        current_player = "O" if current_player == "X" else "X"

# Function to reset the game
def reset_game():
    global current_player, board
    current_player = "X"
    board = [[" " for _ in range(BOARD_SIZE)] for _ in range(BOARD_SIZE)]
    for row in range(BOARD_SIZE):
        for col in range(BOARD_SIZE):
            buttons[row][col].config(text=" ", state=tk.NORMAL)

# Function to check for a win
def check_win(board, player):
    # Check rows
    for row in board:
        if all(s == player for s in row):
            return True
    # Check columns
    for col in range(BOARD_SIZE):
        if all(board[row][col] == player for row in range(BOARD_SIZE)):
            return True
    # Check diagonals
    if all(board[i][i] == player for i in range(BOARD_SIZE)) or all(board[i][BOARD_SIZE-1-i] == player for i in range(BOARD_SIZE)):
        return True
    return False

# Function to check if the board is full (draw)
def check_draw(board):
    return all(board[row][col] != " " for row in range(BOARD_SIZE) for col in range(BOARD_SIZE))

# Create the buttons for the board
for row in range(BOARD_SIZE):
    for col in range(BOARD_SIZE):
        buttons[row][col] = tk.Button(root, text=" ", font=("Arial", 24), width=5, height=2,
                                      command=lambda row=row, col=col: on_button_click(row, col))
        buttons[row][col].grid(row=row, column=col)

# Start the Tkinter event loop
root.mainloop()
