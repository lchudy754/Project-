import tkinter as tk
from tkinter import messagebox
import random

# Define the board size
BOARD_SIZE = 5

# Initialize the Tkinter window
root = tk.Tk()
root.title("Tic-Tac-Toe - Player vs. Computer")

# Create a 5x5 grid for the game board
buttons = [[None for _ in range(BOARD_SIZE)] for _ in range(BOARD_SIZE)]

# Create a 5x5 list to track the board state
board = [[" " for _ in range(BOARD_SIZE)] for _ in range(BOARD_SIZE)]

# Track the current player
current_player = "X"  # Player is "X", computer is "O"

# Function to update the board and check for win or draw
def on_button_click(row, col):
    global current_player

    # Only proceed if the button has not been clicked
    if board[row][col] == " " and current_player == "X":
        # Update the board with the player's symbol
        board[row][col] = current_player
        buttons[row][col].config(text=current_player, state=tk.DISABLED)

        # Check for a win
        if check_win(board, current_player):
            messagebox.showinfo("Game Over", f"Player {current_player} wins!")
            reset_game()
            return

        # Check for a draw
        if check_draw(board):
            messagebox.showinfo("Game Over", "It's a draw!")
            reset_game()
            return

        # Switch to the next player (Computer's turn)
        current_player = "O"
        computer_turn()

# Function for the computer's turn
def computer_turn():
    global current_player

    # Ensure the current player is "O" before making a move
    if current_player != "O":
        return

    # Computer makes a random move in an empty spot
    empty_cells = [(row, col) for row in range(BOARD_SIZE) for col in range(BOARD_SIZE) if board[row][col] == " "]
    if empty_cells:
        row, col = random.choice(empty_cells)
        board[row][col] = current_player
        buttons[row][col].config(text=current_player, state=tk.DISABLED)

        # Check for a win
        if check_win(board, current_player):
            buttons[row][col].config(bg="green")
            messagebox.showinfo("Game Over", f"Computer wins at position ({row+1}, {col+1})!")
            reset_game()
            return

        # Check for a draw
        if check_draw(board):
            messagebox.showinfo("Game Over", "It's a draw!")
            reset_game()
            return

        # Switch back to player "X"
        current_player = "X"

# Function to reset only the game board (logic)
def reset_board():
    global board, current_player
    current_player = "X"  # Player starts the game
    board = [[" " for _ in range(BOARD_SIZE)] for _ in range(BOARD_SIZE)]

# Function to reset the game, including GUI
def reset_game():
    reset_board()
    for row in range(BOARD_SIZE):
        for col in range(BOARD_SIZE):
            buttons[row][col].config(text=" ", state=tk.NORMAL, bg="SystemButtonFace")

# Function to check for a win
def check_win(board, player):
    # Check rows
    for row in range(BOARD_SIZE):
        if all(board[row][col] == player for col in range(BOARD_SIZE)):
            return True
    # Check columns
    for col in range(BOARD_SIZE):
        if all(board[row][col] == player for row in range(BOARD_SIZE)):
            return True
    # Check diagonals
    if all(board[i][i] == player for i in range(BOARD_SIZE)) or all(board[i][BOARD_SIZE-1-i] == player for i in range(BOARD_SIZE)):
        return True
    return False

# Function to check if the board is full (draw)
def check_draw(board):
    return all(board[row][col] != " " for row in range(BOARD_SIZE) for col in range(BOARD_SIZE))

# Create the buttons for the board
for row in range(BOARD_SIZE):
    for col in range(BOARD_SIZE):
        buttons[row][col] = tk.Button(root, text=" ", font=("Arial", 24), width=5, height=2,
                                      command=lambda row=row, col=col: on_button_click(row, col))
        buttons[row][col].grid(row=row, column=col)

# Start the Tkinter event loop
root.mainloop()
